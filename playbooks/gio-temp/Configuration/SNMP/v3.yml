---
- name: Group Display and Selection
  hosts: localhost
  gather_facts: false

  vars_prompt:
    - name: target_hosts
      prompt: |
        Available groups:
        {% for g in groups.keys() | sort %}
        - {{ g }}
        {% endfor %}
        
        Enter host(s) or group(s) separated by commas (e.g., router,switch1,switch4)
      private: no
    
  tasks:
    - name: Store answers as facts for next play
      set_fact:
        target_hosts: "{{ target_hosts }}"
      run_once: true
      no_log: true

- name: Configure SNMP v2c with ACL (IOS, IOS-XE, ASA, NX-OS, IOS-XR)
  hosts: "{{ hostvars['localhost']['target_hosts'].split(',') }}"
  gather_facts: false
  vars_files:
    - jumpboxes.yml

  vars_prompt:
    - name: ansible_user
      prompt: "Enter device username"
      private: no
    - name: ansible_password
      prompt: "Enter device password"
      private: yes
    - name: snmp_v3_name
      prompt: "Enter SNMPv3 username"
      private: no
    - name: snmp_v3_auth_protocol
      prompt: "Enter SNMPv3 auth protocol (md5/sha)"
      private: no
      default: sha
    - name: snmp_v3_auth_password
      prompt: "Enter SNMPv3 auth password"
      private: yes
    - name: snmp_v3_priv_protocol
      prompt: "Enter SNMPv3 privacy protocol (aes/des)"
      private: no
      default: aes
    - name: snmp_v3_priv_password
      prompt: "Enter SNMPv3 privacy password"
      private: yes
    - name: snmp_v3_group
      prompt: "Enter SNMPv3 group name"
      private: no
      default: ROGroup

  vars:
    snmp_acl_name: "anm-ms-snmp-acl-std"

  tasks:

    ##########################################################
    # Build ACL lines in device-specific format
    ##########################################################
    - name: Build ACL lines
      set_fact:
        acl_lines_ios: "{{ snmp_allowed_ips | map('regex_replace','^(.*)$','permit \\1') | list }}"
        acl_lines_iosxr: "{{ snmp_allowed_ips | map('regex_replace','^(.*)$','permit \\1') | list }}"
        acl_lines_asa: "{{ snmp_allowed_ips | map('regex_replace','^(.*)$','permit ip host \\1 any') | list }}"
        acl_lines_nxos: "{{ snmp_allowed_ips | map('regex_replace','^(.*)$','permit ip host \\1 any') | list }}"

    ##########################################################
    # Gather existing ACL
    ##########################################################
    - name: Get existing ACL
      block:
        - name: Get ACL IOS / IOS-XE
          ios_command:
            commands:
              - "show running-config | section ip access-list standard {{ snmp_acl_name }}"
          register: acl_raw_ios
          when: hostvars[inventory_hostname]['ansible_network_os'] in ['ios','iosxe']

        - name: Get ACL IOS-XR
          iosxr_command:
            commands:
              - "show running-config | section ipv4 access-list {{ snmp_acl_name }}"
          register: acl_raw_xr
          when: hostvars[inventory_hostname]['ansible_network_os'] == 'iosxr'

        - name: Get ACL ASA
          asa_command:
            commands:
              - "show running-config access-list {{ snmp_acl_name }}"
          register: acl_raw_asa
          when: hostvars[inventory_hostname]['ansible_network_os'] == 'asa'

        - name: Get ACL NX-OS
          nxos_command:
            commands:
              - "show running-config | section ip access-list {{ snmp_acl_name }}"
          register: acl_raw_nxos
          when: hostvars[inventory_hostname]['ansible_network_os'] == 'nxos'

    ##########################################################
    # Parse existing ACL IPs
    ##########################################################

    - name: Parse existing ACL IPs
      set_fact:
        existing_acl_ips: >-
          {% set os = hostvars[inventory_hostname]['ansible_network_os'] | lower | trim %}
          {% if os in ['ios','iosxe'] %}
            {{ (acl_raw_ios.stdout[0] | default('')) 
              | regex_findall('permit\s+(\d{1,3}(?:\.\d{1,3}){3})') }}
          {% elif os == 'iosxr' %}
            {{ (acl_raw_xr.stdout[0] | default('')) 
              | regex_findall('permit\s+(\d{1,3}(?:\.\d{1,3}){3})') }}
          {% elif os == 'asa' %}
            {{ (acl_raw_asa.stdout[0] | default('')) 
              | regex_findall('permit ip host (\d{1,3}(?:\.\d{1,3}){3}) any') }}
          {% elif os == 'nxos' %}
            {{ (acl_raw_nxos.stdout[0] | default('')) 
              | regex_findall('permit ip host (\d{1,3}(?:\.\d{1,3}){3}) any') }}
          {% else %}
            []
          {% endif %}

    ##########################################################
    # Compute stale IPs
    ##########################################################
    - name: Convert existing ACL IPs string to a proper list
      set_fact:
        existing_acl_ips_list: "{{ existing_acl_ips | from_yaml }}"

    - name: Compute stale IPs
      set_fact:
        remove_ips: "{{ existing_acl_ips_list | difference(snmp_allowed_ips) | list }}"

    ##########################################################
    # Remove stale entries
    ##########################################################
    - name: Remove stale ACL entries
      block:
        - name: Remove stale entries IOS / IOS-XE
          ios_config:
            parents: "ip access-list standard {{ snmp_acl_name }}"
            lines: "{{ remove_ips | map('regex_replace','^(.*)$','no permit \\1') | list }}"
          when: hostvars[inventory_hostname]['ansible_network_os'] in ['ios','iosxe'] and remove_ips | length > 0

        - name: Remove stale entries IOS-XR
          iosxr_config:
            parents: "ipv4 access-list {{ snmp_acl_name }}"
            lines: "{{ remove_ips | map('regex_replace','^(.*)$','no permit \\1') | list }}"
          when: hostvars[inventory_hostname]['ansible_network_os'] == 'iosxr' and remove_ips | length > 0

        - name: Remove stale entries ASA
          asa_config:
            parents: "access-list {{ snmp_acl_name }}"
            lines: "{{ remove_ips | map('regex_replace','^(.*)$','no permit ip host \\1 any') | list }}"
          when: hostvars[inventory_hostname]['ansible_network_os'] == 'asa' and remove_ips | length > 0

        - name: Remove stale entries NX-OS
          nxos_config:
            parents: "ip access-list {{ snmp_acl_name }}"
            lines: "{{ remove_ips | map('regex_replace','^(.*)$','no permit ip host \\1 any') | list }}"
          when: hostvars[inventory_hostname]['ansible_network_os'] == 'nxos' and remove_ips | length > 0

    ##########################################################
    # Apply ACL changes per platform (add/remove) & save
    ##########################################################
    - name: Add missing ACL entries
      block:
        - name: Add missing entries IOS / IOS-XE
          ios_config:
            parents: "ip access-list standard {{ snmp_acl_name }}"
            lines: "{{ snmp_allowed_ips | difference(existing_acl_ips) | map('regex_replace','^(.*)$','permit \\1') | list }}"
            save_when: always
          when: hostvars[inventory_hostname]['ansible_network_os'] in ['ios','iosxe'] and (snmp_allowed_ips | difference(existing_acl_ips)) | length > 0

        - name: Add missing entries IOS-XR
          iosxr_config:
            parents: "ipv4 access-list {{ snmp_acl_name }}"
            lines: "{{ snmp_allowed_ips | difference(existing_acl_ips) | map('regex_replace','^(.*)$','permit \\1') | list }}"
            save_when: always
          when: hostvars[inventory_hostname]['ansible_network_os'] == 'iosxr' and (snmp_allowed_ips | difference(existing_acl_ips)) | length > 0

        - name: Add missing entries ASA
          asa_config:
            parents: "access-list {{ snmp_acl_name }}"
            lines: "{{ snmp_allowed_ips | difference(existing_acl_ips) | map('regex_replace','^(.*)$','permit ip host \\1 any') | list }}"
            save_when: always
          when: hostvars[inventory_hostname]['ansible_network_os'] == 'asa' and (snmp_allowed_ips | difference(existing_acl_ips)) | length > 0

        - name: Add missing entries NX-OS
          nxos_config:
            parents: "ip access-list {{ snmp_acl_name }}"
            lines: "{{ snmp_allowed_ips | difference(existing_acl_ips) | map('regex_replace','^(.*)$','permit ip host \\1 any') | list }}"
            save_when: always
          when: hostvars[inventory_hostname]['ansible_network_os'] == 'nxos' and (snmp_allowed_ips | difference(existing_acl_ips)) | length > 0

    #################################################################
    # Configure SNMPv3
    #################################################################

    - name: Configure SNMPv3 user on IOS/IOS-XE
      ios_config:
        lines:
          - "snmp-server group {{ snmp_v3_group }} v3 priv access {{ snmp_acl_name }}"
          - "snmp-server user {{ snmp_v3_name }} {{ snmp_v3_group }} v3 auth {{ snmp_v3_auth_protocol }} {{ snmp_v3_auth_password }} priv {{ snmp_v3_priv_protocol }} {{ snmp_v3_priv_password }}"
        save_when: always
      when: ansible_network_os | lower in ['ios','iosxe']

    - name: Configure SNMPv3 user on NX-OS
      nxos_config:
        lines:
          - "snmp-server user {{ snmp_v3_name }} {{ snmp_v3_group }} v3 auth {{ snmp_v3_auth_protocol }} {{ snmp_v3_auth_password }} priv {{ snmp_v3_priv_protocol }} {{ snmp_v3_priv_password }}"
        save_when: always
      when: ansible_network_os | lower == 'nxos'

    - name: Configure SNMPv3 user on IOS-XR
      iosxr_config:
        lines:
          - "snmp-server group {{ snmp_v3_group }} v3 priv"
          - "snmp-server user {{ snmp_v3_name }} {{ snmp_v3_group }} auth {{ snmp_v3_auth_protocol }} {{ snmp_v3_auth_password }} priv {{ snmp_v3_priv_protocol }} {{ snmp_v3_priv_password }}"
        save_when: always
      when: ansible_network_os | lower == 'iosxr'

    - name: Configure SNMPv3 user on ASA
      asa_config:
        lines:
          - "snmp-server group {{ snmp_v3_group }} v3 priv"
          - "snmp-server user {{ snmp_v3_name }} {{ snmp_v3_group }} auth {{ snmp_v3_auth_protocol }} {{ snmp_v3_auth_password }} priv {{ snmp_v3_priv_protocol }} {{ snmp_v3_priv_password }}"
        save_when: always
      when: ansible_network_os | lower == 'asa'
