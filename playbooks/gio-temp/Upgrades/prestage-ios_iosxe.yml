---
- name: IOSXE Upgrade Playbook
  hosts: localhost
  gather_facts: false

  vars_prompt:
    - name: target_hosts
      prompt: |
        Available groups:
        {% for g in groups.keys() | sort %}
        - {{ g }}
        {% endfor %}
        
        Enter host(s) or group(s) separated by commas (e.g., router,switch1,switch4)
      private: no
    
  tasks:
    - name: Store answers as facts for next play
      set_fact:
        target_hosts: "{{ target_hosts }}"
      run_once: true
      no_log: true
- name: IOSXE Upgrade Playbook
  hosts: "{{ hostvars['localhost']['target_hosts'].split(',') }}"
  vars_files: 
    - ./images.yml
  gather_facts: false
  connection: network_cli

  vars_prompt:
    - name: http_server
      prompt: "Enter IP address of http server"
      private : no
    - name: ansible_user
      prompt: "Enter username"
      private: no
    - name: ansible_password
      prompt: "Enter password" 
      private: yes

  roles:
    - ansible-pyats

  tasks:
    ##Check http server
    - name: Check http availability
      ansible.builtin.uri:
        url: "http://{{ http_server }}/http/"
        method: GET
        status_code: 200
      register: http_check_result
      failed_when: http_check_result.status != 200
      run_once: true
      delegate_to: localhost

    ##Gather Facts to display
    - name: Gather facts for Devices
      tags: pre-check, check-version, install, upgrade
      ios_facts:
        gather_subset:
          - all
    ##set install/bundle mode
    - name: Detect install or bundle mode
      set_fact:
        device_mode: "{{ 'install' if ansible_net_image is search('packages.conf') else 'bundle' }}"

    ##set target_image
    - name: Set Fact for target image name using platform
      tags: pre-check, check-version, post-check, install
      set_fact:
        raw_target_image: "{{ platform_series | lower }}_target_image"

    - name: Set Fact for target image using platform
      tags: pre-check, check-version, post-check, install
      set_fact:
        target_image: "{{ lookup('vars', raw_target_image) }}"

    ##set target_image_md5
    - name: Set Fact for target image name using platform
      tags: pre-check, check-version, post-check, install
      set_fact:
        target_image_md5_raw: "{{ platform_series | lower }}_md5_hash"

    - name: Set Fact for target md5
      tags: pre-check, check-version, post-check, install
      set_fact:
        target_image_md5: "{{ lookup('vars', target_image_md5_raw) }}"

    ##set target_image_size
    - name: Set Fact for target image name using platform
      tags: pre-check, check-version, post-check, install
      set_fact:
        target_image_size_raw: "{{ platform_series | lower }}_image_size_bytes"

    - name: Set Fact for target md5
      tags: pre-check, check-version, post-check, install
      set_fact:
        target_image_size: "{{ lookup('vars', target_image_size_raw) }}"

    ##set target_ver
    - name: Set Fact for target image code
      tags: pre-check, check-version, post-check, install
      set_fact:
        target_image_code_raw: "{{ platform_series | lower }}_image_code"

    - name: Set Fact for target md5
      tags: pre-check, check-version, post-check, install
      set_fact:
        target_ver: "{{ lookup('vars', target_image_code_raw) }}"
   ##set flash_dir
    - name: Set Flash Directory Fact
      tags: pre-check, check-version, post-check, install
      set_fact:
        flash_dir: "{{ ansible_net_image | split(':') | first | lower }}:"

     ##print variables 
    - name: Basic Facts for "{{ inventory_hostname }}"
      vars:
        msg: |
          Device Model: {{ pid }}
          Device Platform: {{ platform_series }}
          Serial Number: {{ ansible_net_serialnum }}
          Current IOS Version: {{ ansible_net_version }}
          Current IOS Dir: {{ flash_dir }}
          IOS Type: {{ platform_os }}
          Install Mode: {{ device_mode }}
          Target Image: {{ target_image }}
          Target Image Code: {{ target_ver }}
          Target Image Hash: {{ target_image_md5 }}
          Target Image size: {{ target_image_size }}
          Free Diskspace (kb): {{ ansible_net_filesystems_info[flash_dir]['spacefree_kb'] }}
      debug:
        msg: "{{ msg.split('\n') }}"
      tags: pre-check, check-version, install
   
    ##set time variable to use in config file name
    - name: Set the current time as a fact
      tags: backup, install
      set_fact: timestamp="{{ lookup('pipe','date \"+%Y-%m-%d\"') }}"

    ## Configuration backup
    - name: Config Backup for {{ inventory_hostname }}
      tags: backup, install
      ios_config:
        backup: yes
        backup_options:
          filename: "{{ inventory_hostname }}_backup_{{ timestamp }}.cfg"
          dir_path: ./backup
      register: config_output

    ## Set IOS Version/Type and check if running current version
    - name: Set fact for the current IOS version
      tags: pre-check, check-version, post-check, install
      set_fact:
        current_ver: "{{ ansible_net_version }}"

    - name: Set fact for the current IOS Type
      tags: pre-check, check-version, post-check, install
      set_fact:
        ios_type: "{{ ansible_net_iostype }}"

    - name: Set fact for image size
      tags: pre-check, check-version, post-check, install
      set_fact:
        target_image_size_kb: "{{ target_image_size | int / 1000 }}"

    - name: Debug parsed output for the current IOS version
      debug:
        msg: "{{ inventory_hostname }} currently running with {{ current_ver }}"

    - name: Assert that switch is NOT running with the target IOS
      tags: pre-check, check-version, install
      assert:
        success_msg: "{{ inventory_hostname }} not running target version {{ target_ver }}, current version is {{ current_ver }}"
        fail_msg: "{{ inventory_hostname }} already running {{ target_ver }}"
        that: current_ver != target_ver
      
    ## Check if device has the target image
    - name: Check Current files
      tags: pre-check, install, image-check, image-copy
      ios_command:
        commands: "dir {{ flash_dir }}" 
      register: image_check

    - name: Set image check as fact
      tags: pre-check, install, image-check, image-copy
      set_fact:
        dir_image_check: "{{ image_check.stdout[0] | regex_search(image_var, multiline=True) }}"
      vars: 
        image_var: "{{ target_image }}"

    ## Check the disk space
    - name: Assert Enough Disk Space Available
      tags: image-copy, install
      assert:
        success_msg: "Enough disk space is available to accommodate target image."
        fail_msg: 'Not enough disk space available for the target image!'
        that:
          - ansible_net_filesystems_info[flash_dir]['spacefree_kb'] | int > target_image_size_kb | int


    ## Ansible to copy the image via HTTP
    - name: Copy IOSXE Image if does NOT exists in the {{ flash_dir }} dir
      block:
        - name: Assert {{ flash_dir }} does NOT contain target image before copy
          tags: image-copy, install
          assert:
            quiet: false
            success_msg: '{{ target_image }} NOT in {{ flash_dir }}'
            fail_msg: '{{ target_image }} was found in {{ flash_dir }}'
            that:
              - "target_image != dir_image_check"
 
        - name: Copy IOSXE image file via HTTP
          tags: image-copy, install
          ios_command:
            commands: 
              - command: 'copy http://{{http_server}}/http/{{ target_image }} {{ flash_dir }}'
                check_all: True  
                prompt:
                  - "Destination filename [{{ target_image }}]?"
                answer:
                  - "\r" 
            wait_for:
              - result[0] contains {{ target_image_size }} bytes copied
          vars:
            ansible_command_timeout: 2400
            ansible_connect_timeout: 2400
            ansible_ssh_common_args: '-o ServerAliveInterval=30 -o ServerAliveCountMax=120'
          no_log: false
          register: image_copy

      rescue:
        - name: Checks Status
          debug:
            msg: "Some checks are failed, please review the output..."

    - name: Target image MD5 File Validation
      tags: image-validate, install
      ios_command:
        commands:
          - verify /md5 {{ flash_dir }}{{ target_image }} {{ target_image_md5 }}
        wait_for:
          - result[0] contains Verified
      vars:
        ansible_command_timeout: 2400
        ansible_connect_timeout: 2400
        ansible_ssh_common_args: '-o ServerAliveInterval=30 -o ServerAliveCountMax=120'
      register: image_validation_result

    - debug:
        msg: |
          MD5 - {{ image_validation_result.stdout_lines | replace('.', '') }}
          To upgrade use: {{ 
            ('install add file ' ~ flash_dir ~ target_image ~ ' activate commit') 
            if device_mode == 'install' 
            else 
            ('archive download-sw ' ~ flash_dir ~ target_image)
          }}