---

- name: Group Display and selection
  hosts: localhost
  gather_facts: false

  vars_prompt:
    - name: target_hosts
      prompt: |
        Available groups:
        {% for g in groups.keys() | sort %}
        - {{ g }}
        {% endfor %}
        
        Enter host(s) or group(s) separated by commas (e.g., router,switch1,switch4)
      private: no
    
  tasks:
    - name: Store answers as facts for next play
      set_fact:
        target_hosts: "{{ target_hosts }}"
      run_once: true
      no_log: true

- name: Validate credentials for Cisco platforms
  hosts: "{{ hostvars['localhost']['target_hosts'].split(',') }}"
  gather_facts: false

  vars_prompt:
  - name: ansible_user
    prompt: "Enter username"
    private: no
  - name: ansible_password
    prompt: "Enter password"
    private: yes

  tasks:
    #######################################################################
    # IOS / IOS-XE
    #######################################################################
    - name: Test connectivity on Cisco IOS/IOS-XE
      ios_command:
        commands:
          - show version
      register: result
      when: ansible_network_os in ['ios', 'iosxe']

    #######################################################################
    # ASA
    #######################################################################
    - name: Test connectivity on Cisco ASA
      asa_command:
        commands:
          - show version
      register: result
      when: ansible_network_os == 'asa'

    #######################################################################
    # NX-OS
    #######################################################################
    - name: Test connectivity on Cisco NX-OS
      nxos_command:
        commands:
          - show version
      register: result
      when: ansible_network_os == 'nxos'

    #######################################################################
    # IOS-XR
    #######################################################################
    - name: Test connectivity on Cisco IOS-XR
      iosxr_command:
        commands:
          - show version
      register: result
      when: ansible_network_os == 'iosxr'

    #######################################################################
    # FMC HTTPS
    #######################################################################
    - name: Validate Cisco FMC GUI credentials
      uri:
        url: "https://{{ ansible_host }}/login.cgi"
        method: POST
        body_format: form-urlencoded
        body:
          username: "{{ ansible_user }}"
          password: "{{ ansible_password }}"
        validate_certs: "{{ ansible_fmc_verify }}"
        return_content: yes
        follow_redirects: none
        status_code: [302]
      register: result
      when: ansible_network_os == 'fmcansible'
      delegate_to: localhost

    #######################################################################
    # FMC CLI
    #######################################################################
    - name: Validate Cisco FMC CLI credentials
      connection: ssh
      ansible.builtin.command: "echo connected"
      failed_when: false
      when: ansible_network_os == 'fmcansible'

    #######################################################################
    # FTD CLI
    #######################################################################
    - name: Validate Cisco FTD CLI credentials
      connection: ssh
      ansible.builtin.command: "echo connected"
      failed_when: false
      when: ansible_network_os == 'ftd'

    #######################################################################
    # ISE HTTPS
    #######################################################################
    - name: Validate Cisco ISE GUI credentials
      uri:
        url: "https://{{ ansible_host }}/admin/login.jsp"
        method: POST
        body_format: form-urlencoded
        body:
          j_username: "{{ ansible_user }}"
          j_password: "{{ ansible_password }}"
        return_content: yes
        validate_certs: "{{ ansible_ise_verify }}"
        follow_redirects: none
        status_code: [302]
      register: result
      when: ansible_network_os == 'ise'
      delegate_to: localhost

    #######################################################################
    # ISE CLI
    #######################################################################
    - name: Validate Cisco FMC CLI credentials
      connection: ssh
      ansible.builtin.command: "echo connected"
      failed_when: false
      when: ansible_network_os == 'ise'

    #######################################################################
    # Panorama/PA GUI
    #######################################################################
    
    - name: Validate Panorama API login using type=op
      uri:
        url: "https://{{ ansible_host }}/api/?type=op&cmd=<show><system><info></info></system></show>"
        method: GET
        user: "{{ ansible_user }}"
        password: "{{ ansible_password }}"
        force_basic_auth: yes
        validate_certs: no
        status_code: [200]
      register: result
      delegate_to: localhost
      failed_when: result.status != 200
      changed_when: false
      when: ansible_network_os == "panos"


    #######################################################################
    # Palo ALto CLI
    #######################################################################

    - name: Validate Palo Alto CLI credentials
      ansible.builtin.command: "show system info"
      register: result
      failed_when: false
      when: ansible_network_os == 'panos'

    # #######################################################################
    # # Result summary - NOT Accurate for showing failures
    # #######################################################################
    # # - name: Display validation result
    # #   debug:
    # #     msg: >
    # #       {% if ansible_network_os in ['ios', 'iosxe', 'asa', 'nxos', 'iosxr', 'ftd'] %}
    # #         {% if result.failed is defined and result.failed %}
    # #         Login failed on {{ inventory_hostname }}
    # #         {% else %}
    # #         Login successful on {{ inventory_hostname }}
    # #         {% endif %}
    # #       {% elif ansible_network_os in ['ise'] %}
    # #         {% if 'Dashboard' in result.content or result.status == 302 %}
    # #           ISE login successful on {{ inventory_hostname }}
    # #           {% elif 'Invalid Login' in result.content %}
    # #           ISE invalid credentials
    # #           {% else %}
    # #           Unexpected ISE response: HTTP {{ result.status }}
    # #           {% endif %}
    # #       {% elif ansible_network_os in ['fmcansible'] %}
    # #         {% if 'dashboard' in result.content or result.status == 302 %}
    # #         FMC login successful on {{ inventory_hostname }}
    # #         {% elif 'Invalid Login' in result.content %}
    # #         FMC invalid credentials
    # #         {% else %}
    # #         Unexpected FMC response: HTTP {{ result.status }}
    # #         {% endif %}
    # #       {% else %}
    # #       Unsupported device type for {{ inventory_hostname }}
    # #       {% endif %}
